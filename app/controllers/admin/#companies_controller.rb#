# -*- coding: utf-8 -*-
class Admin::CompaniesController < Admin::ApplicationController
  layout 'streamlined'
  acts_as_streamlined

end

class Admin::CompaniesController2 < Admin::ApplicationController
  
  active_scaffold :companies do |config|
    show.link.label     = 'œô¨¿œô¨Þœô¨Úœô¨Ðœô¨×œô¨Ðœô¨âœô¨ì'
    update.link.label   = 'œô¨¸œô¨×œô¨Üœô¨Õœô¨Ýœô¨Øœô¨âœô¨ì'
    delete.link.label   = 'œô¨Ãœô¨Ôœô¨Ðœô¨Ûœô¨Øœô¨âœô¨ì'
    create.link.label   = 'œô¨Áœô¨Þœô¨×œô¨Ôœô¨Ðœô¨âœô¨ì'
    search.link.label   = 'œô¨¿œô¨Þœô¨Øœô¨áœô¨Ú'
          
    config.label = "œô¨ºœô¨Þœô¨Üœô¨ßœô¨Ðœô¨Ýœô¨Øœô¨Ø"
    config.columns[:category].label     = 'œô¨Úœô¨Ðœô¨âœô¨Õœô¨Óœô¨Þœô¨àœô¨Øœô¨ï'
    config.columns[:pending].label      = 'œô¨Ýœô¨Ð œô¨Üœô¨Þœô¨Ôœô¨Õœô¨àœô¨Ðœô¨æœô¨Øœô¨Ø'
    config.columns[:name].label         = 'œô¨Ýœô¨Ðœô¨×œô¨Òœô¨Ðœô¨Ýœô¨Øœô¨Õ'
    config.columns[:full_name].label    = 'œô¨ßœô¨Þœô¨Ûœô¨Ýœô¨Þœô¨Õ œô¨Ýœô¨Ðœô¨×œô¨Òœô¨Ðœô¨Ýœô¨Øœô¨Õ'
    config.columns[:inn].label          = 'œô¨¸œô¨½œô¨½'
    config.columns[:address].label      = 'œô¨Ðœô¨Ôœô¨àœô¨Õœô¨á'
    config.columns[:site].label         = 'œô¨áœô¨Ðœô¨Ùœô¨â'
    config.columns[:phones].label       = 'œô¨âœô¨Õœô¨Ûœô¨Õœô¨äœô¨Þœô¨Ýœô¨ë'
    config.columns[:emails].label       = 'e-mail'
    config.columns[:director].label     = 'œô¨àœô¨ãœô¨Úœô¨Þœô¨Òœô¨Þœô¨Ôœô¨Øœô¨âœô¨Õœô¨Ûœô¨ì'
    config.columns[:description].label  = 'œô¨Þœô¨ßœô¨Øœô¨áœô¨Ðœô¨Ýœô¨Øœô¨Õ'
    config.columns[:working_time].label = 'œô¨àœô¨Ðœô¨Ñœô¨Þœô¨çœô¨Õœô¨Õ œô¨Òœô¨àœô¨Õœô¨Üœô¨ï'
    config.columns[:sources].label      = 'œô¨Øœô¨áœô¨âœô¨Þœô¨çœô¨Ýœô¨Øœô¨Úœô¨Ø'
    config.columns[:updated_at].label   = 'œô¨Øœô¨×œô¨Üœô¨Õœô¨Ýœô¨Õœô¨Ýœô¨Ð'

    config.columns = [:category, :pending, :name, :full_name, :inn, :address, :site, :director, :description, :working_time, :sources, :updated_at, :phones, :emails]
    config.list.columns.exclude :director, :description, :working_time, :sources
    config.update.columns.exclude :updated_at
    
    config.list.sorting = { :updated_at => :desc }
  end

  def conditions_for_collection
    ["pending = 't' or pending = 'f'"]
  end

  def before_create_save(record)
    record.pending = false
  end
  
  def find_if_allowed(id, action, klass = nil)
    klass ||= active_scaffold_config.model
    record = klass.find_by_id(id, :conditions => { :pending => true })
    raise ActiveScaffold::RecordNotAllowed unless record.authorized_for?(:action => action.to_sym)
    return record
  end
  
end
